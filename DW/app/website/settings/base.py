"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 1.11.13.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    # Wagtail Foundation Components
    'base',
    'flex',
    'mediatext',
    'carousel',
    'tabfilter',
    'vimeo',
    'contact',
    'iframe',
    'brandsettings',
    'navbar',
    'flexcomponents',
    'socialmedia',
    'footer',
    'overlay',
    'animations',
    'styleguide',

    # Legacy Wagtail Foundation Components
    # 'magnificpopup',

    # For S3 Storage
    'storages',

    # Favicon Config
    'favicon',

    # Admin Icons
    'wagtailfontawesome',

    'website',
    'search',

    # React Streamfield UI
    'wagtail_react_streamfield',

    'wagtail.contrib.settings',
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.contrib.modeladmin',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail.core',

    'modelcluster',
    'taggit',
    'wagtailmedia',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',

    'wagtail.core.middleware.SiteMiddleware',
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
]

ROOT_URLCONF = 'website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'wagtail.contrib.settings.context_processors.settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE','django.db.backends.mysql'),
        'NAME': os.getenv('DB_NAME','wagtail'),
        'USER': os.getenv('DB_USER','root'),
        'PASSWORD': os.getenv('DB_PASSWORD','password'),
        'HOST': os.getenv('DB_HOST','db'),
        'PORT': os.getenv('DB_PORT','3306'),
        'OPTIONS': {
            # https://django-mysql.readthedocs.io/en/latest/checks.html#django-mysql-w003-utf8mb4
            'charset': 'utf8mb4'
        },
        # Tell Django to build the test database with the 'utf8mb4' character set
        # https://django-mysql.readthedocs.io/en/latest/checks.html#django-mysql-w003-utf8mb4
        'TEST': {
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# AWS Settings

# Used to set MEDIA_URL and DEFAULT_FILE_STORAGE accordingly
ENABLE_AWS_MEDIA_STORAGE = os.getenv('ENABLE_AWS_MEDIA_STORAGE', False)
# Used to set STATICFILES_STORAGE accordingly
ENABLE_AWS_STATIC_STORAGE = os.getenv('ENABLE_AWS_STATIC_STORAGE', False)

# AWS Credentials (leave as is)
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME', '') # Name of the media storage S3 bucket
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', '')             # User's access key ID (found in credentials.csv)
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', '')     # User's secret access key (found in credentials.csv)

# Domain is determined based on AWS_STORAGE_BUCKET_NAME
AWS_S3_CUSTOM_DOMAIN = '{bucket_name}.s3.amazonaws.com'.format(bucket_name=AWS_STORAGE_BUCKET_NAME)
# Set to True if s3 bucket URL should use https:// instead of http://
AWS_S3_HTTPS = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATICFILES_LOCATION = 'static'

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, STATICFILES_LOCATION),
]

STATIC_ROOT = os.path.join(BASE_DIR, STATICFILES_LOCATION)
STATIC_URL = '/{}/'.format(STATICFILES_LOCATION)

# Use custom storage backend for AWS
if ENABLE_AWS_STATIC_STORAGE:
    STATICFILES_STORAGE = 'storage_backends.StaticS3Storage'


# Media files

MEDIAFILES_LOCATION = 'media'

MEDIA_ROOT = os.path.join(BASE_DIR, MEDIAFILES_LOCATION)
MEDIA_URL = '/{}/'.format(MEDIAFILES_LOCATION)

# Use custom storage backend for AWS
if ENABLE_AWS_MEDIA_STORAGE:
    MEDIA_URL = ('https://' if AWS_S3_HTTPS else 'http://') + AWS_S3_CUSTOM_DOMAIN + MEDIA_URL
    DEFAULT_FILE_STORAGE = 'storage_backends.MediaS3Storage'


# Wagtail settings

WAGTAIL_SITE_NAME = "website"

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_URL = 'http://example.com'


# PLUGINS

# Favicon settings
# https://github.com/arteria/django-favicon-plus
FAVICON_CONFIG = {
    'shortcut icon': [16 ,32 ,48 ,128, 192],
    'touch-icon': [196],
    'icon': [196],
    'apple-touch-icon': [57, 72, 114, 144, 180],
    'apple-touch-icon-precomposed': [57, 72, 76, 114, 120, 144, 152,180],
}

